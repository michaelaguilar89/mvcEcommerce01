@model MVCEcommerce.Dto_s.CartViewModel

@{
    ViewData["Title"] = "Cart";
}

<div class="container">
    <h3 class="text-center text-primary">Your Cart ( <span id="total-items">0</span> )</h3>

  
    
    <form asp-action="SubmitOrder" method="post">

        <div id="cart-items"></div>

        <!-- Total de artículos y precio total -->
        <div class="text-right mt-4">
            <p>Total items: <span id="total-items">0</span></p>
            <p>Total: $<span id="total-price">0.00</span></p>
        </div>


         <!-- Datos del Cliente -->
        <div class="row">
            <div class="col-lg-6 mx-auto 0">
                <h2 class="text-center text-success">Contact Form</h2>
                <div class="form-group">
                    <label asp-for="Name"></label>
                    <input asp-for="Name" class="form-control" required />
                </div>
                <div class="form-group">
                    <label asp-for="Email"></label>
                    <input asp-for="Email" type="email" class="form-control" required />
                </div>
                <div class="form-group">
                    <label asp-for="Address"></label>
                    <input asp-for="Address" class="form-control" required />
                </div>
                <div class="form-group">
                    <label asp-for="PhoneNumber"></label>
                    <input asp-for="PhoneNumber" type="tel" class="form-control" required />
                </div>
                <!-- Campo para número de WhatsApp -->
                <div class="form-group">
                    <label for="whatsappNumber">WhatsApp Number</label>
                    <input type="tel" name="WhatsAppNumber" class="form-control" placeholder="+123456789" required />
                </div>


                <!-- Botones para envío -->
                <div class="form-group text-center">
                    <button type="submit" class="btn btn-primary mt-3 p-2" formaction="@Url.Action("SubmitOrderEmail", "Home")">Send by Email</button>
                    <button type="button" class="btn btn-success mt-3 p-2" onclick="sendWhatsApp()">Send by WhatsApp</button>
                    <a asp-action="Index" asp-controller="Home" class="btn btn-secondary mt-3 p-2">Go Back</a>
                    <button class="btn btn-danger mt-3 p-2" onclick="cleanCart()">Clear Cart</button>

                </div>
                


            </div>
        </div>

      
    </form>
</div>

<script>

    
    // Función para enviar el pedido por WhatsApp
    function sendWhatsApp() {
        const whatsappNumber = document.querySelector("input[name='WhatsAppNumber']").value;
        if (!whatsappNumber) {
            alert("Please enter a WhatsApp number.");
            return;
        }

        // Obtener los valores de los campos del formulario
        const clientName = document.querySelector("input[name='Name']").value;
        const email = document.querySelector("input[name='Email']").value;
        const phoneNumber = document.querySelector("input[name='PhoneNumber']").value;
        const address = document.querySelector("input[name='Address']").value;


        const cart = JSON.parse(localStorage.getItem("cart")) || [];
        if (cart.length === 0) {
            alert("Your cart is empty.");
            return;
        }

      
        
        // Crear el mensaje de WhatsApp
        let message = "Online Shopping -- Order Details:\n\n";
        message += `Client: ${clientName}\n`;
        message += `Email: ${email}\n`;
        message += `Phone Number: ${phoneNumber}\n`;
        message += `Address: ${address}\n\n`;
        message += "Order Items:\n";
        
        
        cart.forEach(item => {
            const subtotal = item.price * item.quantity;  // Calcular el subtotal aquí
            message += `${item.name} - Quantity: ${item.quantity} - Price: $${item.price.toFixed(2)} - SubTotal: $${subtotal.toFixed(2)}\n`;
        });
        const totalPrice = cart.reduce((total, item) => total + item.price * item.quantity, 0);
        const totalIt3ms = cart.reduce((totalItms, item)=> totalItms + item.quantity,0);
        message += `\nTotal Items: ${totalIt3ms}`;
        
        message += `\nTotal Price: $${totalPrice.toFixed(2)}`;
       
        const whatsappUrl = `https://wa.me/${whatsappNumber}?text=${encodeURIComponent(message)}`;
        window.open(whatsappUrl, "_blank");
    }


    // Cargar el carrito desde Local Storage
    function loadCart() {
        const cart = JSON.parse(localStorage.getItem("cart")) || [];
        const cartItemsContainer = document.getElementById("cart-items");
        cartItemsContainer.innerHTML = "";

        let totalItems = 0;
        let totalPrice = 0;

        // Verificar si el carrito está vacío
        if (cart.length === 0) {
            cartItemsContainer.innerHTML = "<p>Your cart is empty.</p>";
            document.getElementById("total-items").textContent = "0";
            document.getElementById("total-price").textContent = "0.00";
            return;
        }

        cart.forEach((item, index) => {
            const subtotal = item.price * item.quantity;
            totalItems += item.quantity;
            totalPrice += subtotal;

            // Crear elementos de entrada ocultos para cada producto
            const inputId = `<input type="hidden" name="Items[${index}].Id" value="${item.id}" />`;
            const inputName = `<input type="hidden" name="Items[${index}].Name" value="${item.name}" />`;
            const inputPrice = `<input type="hidden" name="Items[${index}].Price" value="${item.price}" />`;
            const inputQuantity = `<input type="hidden" name="Items[${index}].Quantity" value="${item.quantity}" />`;
            const inputSubTotal = `<input type="hidden" name="Items[${index}].SubTotal" value="${item.subtotal}" />`;

            // Contenedor para cada ítem
            const itemDiv = document.createElement("div");
            itemDiv.classList.add("cart-item", "border", "p-3", "mb-3");
            itemDiv.innerHTML = `
                    <h5>${item.name}</h5>
                    <p>Price: $${item.price.toFixed(2)}</p>
                    <p>Quantity: <span class="quantity">${item.quantity}</span></p>
                    <p>Subtotal: $<span class="subtotal">${subtotal.toFixed(2)}</span></p>
                    ${inputId} ${inputName} ${inputPrice} ${inputQuantity}
                    <button class="btn btn-secondary btn-sm mt-2" onclick="updateQuantity('${item.id}', 1)">+1</button>
                    <button class="btn btn-secondary btn-sm mt-2" onclick="updateQuantity('${item.id}', -1)">-1</button>
                    <button class="btn btn-danger btn-sm mt-2" onclick="removeItem('${item.id}')">Remove</button>
                `;

            cartItemsContainer.appendChild(itemDiv);
        });

        // Actualizar el total de ítems y el precio total
        document.getElementById("total-items").textContent = totalItems;
        document.getElementById("total-price").textContent = totalPrice.toFixed(2);
    }

    // Actualizar la cantidad de un producto
    function updateQuantity(productId, change) {
        const cart = JSON.parse(localStorage.getItem("cart")) || [];
        const product = cart.find(item => item.id === productId);

        if (product) {
            product.quantity += change;

            // Eliminar el producto si la cantidad es 0 o menor
            if (product.quantity <= 0) {
                removeItem(productId);
            } else {
                // Actualizar el carrito en el Local Storage
                localStorage.setItem("cart", JSON.stringify(cart));
                loadCart(); // Recargar el carrito
            }
        }
    }

    // Eliminar un producto del carrito
    function removeItem(productId) {
        let cart = JSON.parse(localStorage.getItem("cart")) || [];
        cart = cart.filter(item => item.id !== productId); // Filtrar el producto que se quiere eliminar
        localStorage.setItem("cart", JSON.stringify(cart));
        loadCart(); // Recargar el carrito
    }

    function cleanCart() {
        // Vaciar el carrito en el localStorage
        localStorage.removeItem("cart");

        // Opcional: puedes verificar que se ha eliminado el carrito
        if (!localStorage.getItem("cart")) {
            alert("Carrito limpio.");
        }

        // Actualizar la vista para reflejar el carrito vacío
        loadCart(); // Llamada a la función loadCart para recargar la interfaz con el carrito vacío
    }

        // Cargar el carrito al iniciar la página
        document.addEventListener("DOMContentLoaded", loadCart);
</script>

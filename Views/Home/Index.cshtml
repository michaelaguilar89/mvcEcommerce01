@model MVCEcommerce.Dto_s.HomeViewDto
@{
    ViewData["Title"] = "Home Page";
}

<div class="container">
    <div class="row">

        <h3 class="text-center text-primary">List of Products (@Model.Count) </h3>

        <!-- Botón de Carrito -->
        <div class="text-center my-3">
            <button id="cart-button" class="btn btn-warning" style="display: none;" onclick="goToCart()">
                Cart (<span id="cart-count">0</span>)
            </button>
        </div>
        
        <form method="get" asp-action="Index">
            <div class="form-group col-md-4 mx-auto 0">
                <p class="text-center">
                    <input type="text" name="searchQuery" value="@Model.searchQuery" class="form-control" placeholder="Search products..." />
                    <button type="submit" class="btn btn-primary my-3">Search</button> |
                    <a asp-action="Index" class="my-3">Back To Full list</a>
                </p>

            </div>
        </form>
        @foreach (var item in Model.List)
        {
            <div class="col-lg-4 col-md-6 col-sm-12 mb-4"> 
                <div class="card h-100"> <!-- Altura completa para alinear las tarjetas -->
                    <img src="@item.Url" class="card-img-top" alt="@item.Name" style="height: 200px; object-fit: cover;">
                    <div class="card-body">
                        <h5 class="card-title text-primary">@item.Name</h5>
                        <p class="card-text">Stock: @item.Stock</p>
                        <p class="card-text">Price: @item.Price</p>
                        <p class="card-text">Category: @item.CategoryName</p>
                        <button class="btn btn-primary add-to-cart" data-id="@item.Id">Add to Cart</button>
                    </div>
                </div>
            </div>
        }
    </div>
</div>


<script>
    document.addEventListener("DOMContentLoaded", function () {
        const addToCartButtons = document.querySelectorAll(".add-to-cart");

        // Función para actualizar el botón del carrito
        function updateCartButton() {
            const cart = JSON.parse(localStorage.getItem("cart")) || [];
            const cartCount = cart.reduce((total, product) => total + product.quantity, 0);

            const cartButton = document.getElementById("cart-button");
            const cartCountSpan = document.getElementById("cart-count");

            // Actualizar el contador de carrito y mostrar/ocultar el botón
            cartCountSpan.textContent = cartCount;
            cartButton.style.display = cartCount > 0 ? "inline-block" : "none";
        }

        // Inicializar el botón de carrito al cargar la página
        updateCartButton();

        // Manejar el evento de agregar al carrito
        addToCartButtons.forEach(button => {
            button.addEventListener("click", function (e) {
                e.preventDefault();

                const productId = this.getAttribute("data-id");
                const productName = this.closest(".card-body").querySelector(".card-title").innerText;
                const productPrice = parseFloat(this.closest(".card-body").querySelector(".card-text:nth-child(3)").innerText.replace("Price: ", ""));

                let cart = JSON.parse(localStorage.getItem("cart")) || [];

                const existingProduct = cart.find(p => p.id === productId);

                if (existingProduct) {
                    existingProduct.quantity += 1;
                } else {
                    const product = { id: productId, name: productName, price: productPrice, quantity: 1 };
                    cart.push(product);
                }

                localStorage.setItem("cart", JSON.stringify(cart));
                alert("Product added to cart!");

                // Actualizar el botón del carrito
                updateCartButton();
            });
        });
    });

    // Redirigir a la vista CartView al hacer clic en el botón de carrito
    function goToCart() {
        window.location.href = '@Url.Action("CartView", "Home")';
    }
</script>

